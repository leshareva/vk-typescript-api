    
var methods = /*METHODS_JSON*/;

function checkRanges(param, defines)
    {
    if(defines.minimum && param < defines.minimum)
        {
        throw "expected value >= "+defines.minimum+", given ["+param+"]";
        }
    if(defines.maximum && param > defines.maximum)
        {
        throw "expected value <= "+defines.maximum+", given ["+param+"]";
        }
    }

function checkInt(param, defines)
    {
    if(Number(param) !== param || param % 1 !== 0)
        {
        throw "expected integer, given ["+param+"]";
        }
    checkRanges(param, defines);
    }

function checkFloat(param, defines)
    {
    if(Number(param) !== param)
        {
        throw "expected float number, given ["+param+"]";
        }
    checkRanges(param, defines);
    }

function checkString(param, defines)
    {
    if(typeof param !== 'string' && !(param instanceof String))
        {
        throw "expected string, given ["+param+"]";
        }
    }

function checkEnum(param, defines)
    {
    if(!defines.enum) { return; }
    if(!defines.enum[param])
        {
        throw "param can only equals one of values: "+
        JSON.stringify(defines.enum)+
        ", given ["+param+"]";
        }
    }

function checkParam(param, defines)
    {
    if(defines.type === "integer") { checkInt(param, defines); }
    if(defines.type === "number") { checkFloat(param, defines); }
    if(defines.type === "string") { checkString(param, defines); }
    checkEnum(param, defines);
    }

function checkParams(params, method)
    {
    if(!params || Object.prototype.toString.call(params) === "[object Function]")
        {
        params = {};
        }
    for(var param in params)
        {
        if(!method.parameters[param])
            {
            throw "Not found parameter ["+param+"] in method ["+method.name+"]";
            }
        checkParam(params[param], method.parameters[param])
        }
    // TODO check all required
    }

function initMethods()
    {
    var VKAPI = VK.api;
    VK.api = function(method, params)
        {
        checkParams(params, methods[method]);
        return VKAPI.apply(VK, arguments);
        }
    }

var globalscope = function()
    {
    try { if(window) { return window; } }
    catch(e) { return global; }
    return window;
    }();

if(!globalscope.VK) // TEST
    {
    console.warn("WARNING! You should include vk-safe-wrapper after xd_connection.js!");
    globalscope.VK = {};
    VK.api = function(method, params, callback)
        {
        console.log("vkapi call", method);
        console.dir(params);
        }
    initMethods();
    VK.api("friends.add", {user_id: 12, text: "", follow: 0}); // OK
    VK.api("friends.add", {user_id: 12, text: "", follow: 0, haha: 4}); // throw not found haha
    VK.api("friends.add", {user_id: 12, text: 3, follow: 0}); // throw text: expected string
    }
else
    {
    initMethods();
    }
